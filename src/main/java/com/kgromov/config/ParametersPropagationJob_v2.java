package com.kgromov.config;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.annotation.BeforeStep;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.listener.ExecutionContextPromotionListener;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.support.ListItemReader;
import org.springframework.batch.item.support.ListItemWriter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.stream.Collectors;

@Configuration
@Slf4j
@RequiredArgsConstructor
public class ParametersPropagationJob_v2 {
    private final JobBuilderFactory jobBuilderFactory;
    private final StepBuilderFactory stepBuilderFactory;

    @Bean
    public ListItemReader<Integer> listItemReader() {
        List<Integer> ints = ThreadLocalRandom.current().ints(10).boxed().map(i -> i % 10).collect(Collectors.toList());
        log.info("Items generated by producer step = {}", ints);
        return new ListItemReader<>(ints);
    }

    @Bean
    public ItemProcessor<Integer, Integer> producerItemProcessor() {
        return item -> item;
    }

    @Bean
    IntegerItemWriter integerItemWriter() {
        return new IntegerItemWriter();
    }

    @Bean
    Step producerStep(ListItemReader<Integer> listItemReader,
                      ItemProcessor<Integer, Integer> producerItemProcessor,
                      IntegerItemWriter integerItemWriter,
                      ExecutionContextPromotionListener promotionListener) {
        return stepBuilderFactory.get("step-processor").<Integer, Integer>chunk(10)
                .reader(listItemReader)
                .processor(producerItemProcessor)
                .writer(integerItemWriter)
                .listener(promotionListener)
                .build();
    }

    @Bean
    ExecutionContextPromotionListener promotionListener() {
        ExecutionContextPromotionListener listener = new ExecutionContextPromotionListener();
        listener.setKeys(new String[] {"items"});
        return listener;
    }

    @Bean
    ItemProcessor<Integer, Integer> consumerItemProcessor() {
        return item -> item >= 5 ? item : null;
    }

    @Bean
    ItemWriter<Integer> consumerWriter() {
        return items -> items.stream().max(Integer::compare).ifPresent(max -> log.info("Max item = {}", max));
    }

    @Bean
    Step consumerStep(ItemProcessor<Integer, Integer> consumerItemProcessor, ItemWriter<Integer> consumerWriter) {
        return stepBuilderFactory.get("step-consumer").<Integer, Integer>chunk(10)
                .reader(new IntegerItemReader())
                .processor(consumerItemProcessor)
                .writer(consumerWriter)
                .build();
    }

    @Bean
    public Job saveDataInStepContextJob(Step producerStep, Step consumerStep) {
        return jobBuilderFactory.get("exchange-data-between-steps-with-step-context-promotion")
                .start(producerStep)
                .next(consumerStep)
                .build();
    }


    private static class IntegerItemWriter implements ItemWriter<Integer> {
        private final ItemWriter<Integer> writer = new ListItemWriter<>();
        private ExecutionContext stepExecutionContext;

        @BeforeStep
        public void saveStepExecution(StepExecution stepExecution) {
            this.stepExecutionContext = stepExecution.getExecutionContext();
        }

        @Override
        public void write(List<? extends Integer> items) throws Exception {
            writer.write(items);
            stepExecutionContext.put("items", items);
        }
    }

    private static class IntegerItemReader implements ItemReader<Integer> {
        private ItemReader<Integer> reader;

        @BeforeStep
        public void saveStepExecution(StepExecution stepExecution) {
            JobExecution jobExecution = stepExecution.getJobExecution();
            ExecutionContext jobContext = jobExecution.getExecutionContext();
            List<Integer> items = (List<Integer>) jobContext.get("items");
            reader = new ListItemReader<>(items);
        }

        @Override
        public Integer read() throws Exception {
            return this.reader.read();
        }
    }
}
